(translationUnit (declaration (functionDeclaration (typeSpecifier (integerTypeSpecifier int)) main ( ) (block { (statement (variableDeclarator (typeSpecifier (integerTypeSpecifier int)) (variableDeclaration i) , (variableDeclaration j) , (variableDeclaration n) , (variableDeclaration min) , (variableDeclaration index) , (variableDeclaration temp) ;)) (statement (arrayDeclarator (typeSpecifier (integerTypeSpecifier int)) m [ 100 ] ;)) (statement (expression (functionCall scanf ( (expression (literals (stringLiteral "%d"))) , (expression & (leftExpression n)) ))) ;) (statement (forStatement for ( (forExprSet (expression (leftExpression i) = (expression (literals (integerLiteral 0))))) ; (expression (expression i) < (expression n)) ; (forExprSet (expression (leftExpression i) ++)) ) (statement (block { (statement (expression (functionCall scanf ( (expression (literals (stringLiteral "%d"))) , (expression (expression m) + (expression i)) ))) ;) })))) (statement (forStatement for ( (forExprSet (expression (leftExpression i) = (expression (literals (integerLiteral 0))))) ; (expression (expression i) < (expression n)) ; (forExprSet (expression (leftExpression i) ++)) ) (statement (block { (statement (expression (leftExpression min) = (expression m [ (expression i) ])) ;) (statement (expression (leftExpression index) = (expression i)) ;) (statement (forStatement for ( (forExprSet (expression (leftExpression j) = (expression (expression i) + (expression (literals (integerLiteral 1)))))) ; (expression (expression j) < (expression n)) ; (forExprSet (expression (leftExpression j) ++)) ) (statement (block { (statement (ifStatement if ( (expression (expression min) > (expression m [ (expression j) ])) ) (statement (block { (statement (expression (leftExpression min) = (expression m [ (expression j) ])) ;) (statement (expression (leftExpression index) = (expression j)) ;) })))) })))) (statement (expression (leftExpression temp) = (expression m [ (expression index) ])) ;) (statement (expression (leftExpression m [ (expression index) ]) = (expression m [ (expression i) ])) ;) (statement (expression (leftExpression m [ (expression i) ]) = (expression temp)) ;) })))) (statement (forStatement for ( (forExprSet (expression (leftExpression i) = (expression (literals (integerLiteral 0))))) ; (expression (expression i) < (expression n)) ; (forExprSet (expression (leftExpression i) ++)) ) (statement (expression (functionCall printf ( (expression (literals (stringLiteral "%d"))) , (expression m [ (expression i) ]) ))) ;))) (statement (returnStatement return (expression (literals (integerLiteral 0))) ;)) }))) <EOF>)