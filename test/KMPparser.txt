(translationUnit (declaration (functionDeclaration (typeSpecifier (integerTypeSpecifier int)) KMP ( (functionParameter (pointerTypeSpecifier (typeSpecifier (charTypeSpecifier char)) *) pattern) , (functionParameter (pointerTypeSpecifier (typeSpecifier (charTypeSpecifier char)) *) text) ) (block { (statement (variableDeclarator (typeSpecifier (integerTypeSpecifier int)) (variableDeclaration n) , (variableDeclaration m) , (variableDeclaration k) , (variableDeclaration q) , (variableDeclaration i) ;)) (statement (arrayDeclarator (typeSpecifier (integerTypeSpecifier int)) pai [ 30 ] ;)) (statement (expression (leftExpression pai [ (expression (literals (integerLiteral 0))) ]) = (expression - (expression (literals (integerLiteral 1))))) ;) (statement (expression (leftExpression k) = (expression - (expression (literals (integerLiteral 1))))) ;) (statement (expression (leftExpression n) = (expression (functionCall strlen ( (expression text) )))) ;) (statement (expression (leftExpression m) = (expression (functionCall strlen ( (expression pattern) )))) ;) (statement (forStatement for ( (forExprSet (expression (leftExpression q) = (expression (literals (integerLiteral 1))))) ; (expression (expression q) < (expression m)) ; (forExprSet (expression (leftExpression q) ++)) ) (statement (block { (statement (whileStatement while ( (expression (expression (expression k) > (expression - (expression (literals (integerLiteral 1))))) && (expression (expression pattern [ (expression (expression k) + (expression (literals (integerLiteral 1)))) ]) != (expression pattern [ (expression q) ]))) ) (statement (expression (leftExpression k) = (expression pai [ (expression k) ])) ;))) (statement (ifStatement if ( (expression (expression pattern [ (expression (expression k) + (expression (literals (integerLiteral 1)))) ]) == (expression pattern [ (expression q) ])) ) (statement (expression (leftExpression k) ++) ;))) (statement (expression (leftExpression pai [ (expression q) ]) = (expression k)) ;) })))) (statement (expression (leftExpression q) = (expression - (expression (literals (integerLiteral 1))))) ;) (statement (forStatement for ( (forExprSet (expression (leftExpression i) = (expression (literals (integerLiteral 0))))) ; (expression (expression i) < (expression n)) ; (forExprSet (expression (leftExpression i) ++)) ) (statement (block { (statement (whileStatement while ( (expression (expression (expression q) > (expression - (expression (literals (integerLiteral 1))))) && (expression (expression pattern [ (expression (expression q) + (expression (literals (integerLiteral 1)))) ]) != (expression text [ (expression i) ]))) ) (statement (expression (leftExpression q) = (expression pai [ (expression q) ])) ;))) (statement (ifStatement if ( (expression (expression pattern [ (expression (expression q) + (expression (literals (integerLiteral 1)))) ]) == (expression text [ (expression i) ])) ) (statement (expression (leftExpression q) ++) ;))) (statement (ifStatement if ( (expression (expression i) < (expression (expression m) - (expression (literals (integerLiteral 1))))) ) (statement (continueStatement continue ;)))) (statement (ifStatement if ( (expression (expression (expression q) + (expression (literals (integerLiteral 1)))) == (expression m)) ) (statement (returnStatement return (expression (expression i) - (expression (expression m) + (expression (literals (integerLiteral 1))))) ;)))) })))) (statement (returnStatement return (expression - (expression (literals (integerLiteral 1)))) ;)) }))) (declaration (functionDeclaration (typeSpecifier (integerTypeSpecifier int)) main ( ) (block { (statement (variableDeclarator (typeSpecifier (integerTypeSpecifier int)) (variableDeclaration KMP_result) ;)) (statement (arrayDeclarator (charTypeSpecifier char) text [ 30 ] = (stringLiteral "qwertyuiopasdfghjklzxcvbnm") ;)) (statement (arrayDeclarator (charTypeSpecifier char) pattern [ 5 ] = (stringLiteral "ghjk") ;)) (statement (expression (leftExpression KMP_result) = (expression (functionCall KMP ( (expression pattern) , (expression text) )))) ;) (statement (expression (functionCall printf ( (expression (literals (stringLiteral "%d"))) , (expression KMP_result) ))) ;) (statement (returnStatement return (expression (literals (integerLiteral 0))) ;)) }))) <EOF>)